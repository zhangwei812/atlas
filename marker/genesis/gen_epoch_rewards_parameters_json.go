// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package genesis

import (
	"encoding/json"
	"github.com/mapprotocol/atlas/helper/decimal/bigintstr"
	"github.com/mapprotocol/atlas/helper/decimal/fixed"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
)

var _ = (*EpochRewardsParametersMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e EpochRewardsParameters) MarshalJSON() ([]byte, error) {
	type EpochRewardsParameters struct {
		TargetVotingYieldInitial                     *fixed.Fixed         `json:"targetVotingYieldInitial"`
		TargetVotingYieldMax                         *fixed.Fixed         `json:"targetVotingYieldMax"`
		TargetVotingYieldAdjustmentFactor            *fixed.Fixed         `json:"targetVotingYieldAdjustmentFactor"`
		RewardsMultiplierMax                         *fixed.Fixed         `json:"rewardsMultiplierMax"`
		RewardsMultiplierAdjustmentFactorsUnderspend *fixed.Fixed         `json:"rewardsMultiplierAdjustmentFactorsUnderspend"`
		RewardsMultiplierAdjustmentFactorsOverspend  *fixed.Fixed         `json:"rewardsMultiplierAdjustmentFactorsOverspend"`
		TargetVotingGoldFraction                     *fixed.Fixed         `json:"targetVotingGoldFraction"`
		MaxValidatorEpochPayment                     *bigintstr.BigIntStr `json:"maxValidatorEpochPayment"`
		CommunityRewardFraction                      *fixed.Fixed         `json:"communityRewardFraction"`
		CarbonOffsettingPartner                      common.Address       `json:"carbonOffsettingPartner"`
		CarbonOffsettingFraction                     *fixed.Fixed         `json:"carbonOffsettingFraction"`
		Frozen                                       bool                 `json:"frozen"`
	}
	var enc EpochRewardsParameters

	enc.MaxValidatorEpochPayment = (*bigintstr.BigIntStr)(e.MaxValidatorEpochPayment)
	enc.CommunityRewardFraction = e.CommunityRewardFraction
	enc.CarbonOffsettingPartner = e.CommunityPartner
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *EpochRewardsParameters) UnmarshalJSON(input []byte) error {
	type EpochRewardsParameters struct {
		MaxValidatorEpochPayment *bigintstr.BigIntStr `json:"maxValidatorEpochPayment"`
		CommunityRewardFraction  *fixed.Fixed         `json:"communityRewardFraction"`
		CommunityPartner         *common.Address      `json:"communityPartner"`
	}
	var dec EpochRewardsParameters
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}

	if dec.MaxValidatorEpochPayment != nil {
		e.MaxValidatorEpochPayment = (*big.Int)(dec.MaxValidatorEpochPayment)
	}
	if dec.CommunityRewardFraction != nil {
		e.CommunityRewardFraction = dec.CommunityRewardFraction
	}
	if dec.CommunityPartner != nil {
		e.CommunityPartner = *dec.CommunityPartner
	}
	return nil
}
